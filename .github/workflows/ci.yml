name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Pages 需要的权限
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-22.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers and system deps
        run: python -m playwright install --with-deps

      # 运行 API 测试（静默）
      - name: Run API tests
        run: pytest tests/api -q

      # 运行 UI，并**强制**生成 HTML 报告到 playwright-report/index.html
      - name: Run UI tests (Playwright) with HTML report
        run: |
          mkdir -p playwright-report
          pytest tests/ui -q --html=playwright-report/index.html --self-contained-html
          echo "REPORT_PATH=$(pwd)/playwright-report/index.html"
          test -f playwright-report/index.html

      # 调试：列目录，便于定位为什么没有生成报告
      - name: Debug list report files
        if: always()
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la playwright-report || true

      # 上传 Artifact（保底；失败也会传）
      - name: Upload Playwright report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/**
          if-no-files-found: error
          retention-days: 7

      # 上传 Pages 工件（目录必须存在）
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report

      # 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        if: always()
        id: deployment
        uses: actions/deploy-pages@v4
